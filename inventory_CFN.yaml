AWSTemplateFormatVersion: "2010-09-09"
Description: >
  El siguiente esta diseñado para invetarios.

Resources:

  dynamodbTableInventory:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'N'           
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'  
      TableName: 'note-table'
      BillingMode: 'PAY_PER_REQUEST'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: dynamoExecutionPolicy  
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: !GetAtt  dynamodbTableInventory.Arn

  Lambdainventory:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):

            http_method = event['httpMethod']


            if http_method == 'POST':
                message = 'Se genera una petición de tipo POST'
            elif http_method == 'GET':
                message = 'Se realiza una petición de tipo GET'
            elif http_method == 'DELETE':
                message = 'Se realiza una petición de tipo DELETE'
            elif http_method == 'PUT':
                message = 'Se realiza una petición de tipo PUT'
            else:
                message = 'Tipo de petición no soportada'

            return {
                'statusCode': 200,
                'body': json.dumps(message)
            }

      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: apigateway-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: apigateway-lambda-execution-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt Lambdainventory.Arn

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ApiInventory

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: inventory

  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt  ApiGatewayRole.Arn
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambdainventory.Arn}/invocations"

  DeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt  ApiGatewayRole.Arn
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambdainventory.Arn}/invocations"

  PutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt  ApiGatewayRole.Arn
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambdainventory.Arn}/invocations"

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt  ApiGatewayRole.Arn
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambdainventory.Arn}/invocations"




  ApiDeploy:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - "PostMethod"
      - "DeleteMethod"
      - "GetMethod"
      - "PutMethod"
    Properties:
      RestApiId: !Ref ApiGateway

  LogicalID:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeploy
      RestApiId:  !Ref ApiGateway
      StageName: "state"

  S3BucketCDN:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private

  S3BucketCDNPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3BucketCDN
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${AccessIdentity}"
            Action:
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${S3BucketCDN}/*"

  AccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "My origin access identity"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub "${S3BucketCDN}.s3.${AWS::Region}.amazonaws.com"
          Id: my-origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${AccessIdentity}"
        DefaultCacheBehavior:
          AllowedMethods: 
            - GET
            - HEAD
          TargetOriginId: my-origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all   
        Enabled: true
        DefaultRootObject: index.html